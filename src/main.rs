use image::png::PNGEncoder;
use std::io;

#[derive(Debug)]
struct Measurement {
    date: String,
    time: String,
    freq_low: u32,
    freq_high: u32,
    freq_step: f64,
    samples: u32,
    values: Vec<f32>,
}

impl Measurement {
    fn get_values(&self) -> Vec<(f64, f32)> {
        self.values
            .iter()
            .zip(0..)
            .map(|(value, i)| {
                (
                    ((i) as f64) * self.freq_step + (self.freq_low as f64),
                    *value,
                )
            })
            .collect()
    }
}

fn normalize(v: f32, min: f32, max: f32) -> Vec<u8> {
    let n = (v - min) / max * 256.0;
    vec![n as u8, n as u8, 50]
}

fn main() {
    let mut rdr = csv::ReaderBuilder::new()
        .has_headers(false)
        .from_reader(io::stdin());
    let mut date: String = "".to_string();
    let mut time: String = "".to_string();
    let mut batch = Vec::new();
    let mut batchsize = 0;
    let mut img = Vec::new();
    for result in rdr.records() {
        let mut record = result.unwrap();
        record.trim();
        assert!(record.len() > 7);
        println!("{:?}", record);
        let mut m = Measurement {
            date: record.get(0).unwrap().to_string(),
            time: record.get(1).unwrap().to_string(),
            freq_low: record.get(2).unwrap().parse().unwrap(),
            freq_high: record.get(3).unwrap().parse().unwrap(),
            freq_step: record.get(4).unwrap().parse().unwrap(),
            samples: record.get(5).unwrap().parse().unwrap(),
            values: record.iter().skip(6).map(|s| s.parse().unwrap()).collect(),
        };
        m.values.truncate(record.len() - 7);
        let vals = m.get_values();
        if date == m.date && time == m.time {
        } else {
            println!(
                "{} {}: {:?}",
                m.date,
                m.time,
                batch.iter().map(|(f, _)| f).collect::<Vec<_>>()
            );
            if batchsize == 0 {
                batchsize = batch.len()
            }
            //assert_eq! {batchsize,batch.len()}
            batch.clear();
            date = m.date;
            time = m.time;
        }
        img.extend(vals.iter().flat_map(|(_, v)| normalize(*v, -17.0, 20.0)));
        batch.extend(vals);
    }
    let width = batchsize as u32;
    let height = (img.len() / 3 / batchsize) as u32;
    println!("{}x{}", width, height);
    let f = std::fs::File::create("target/1.png").unwrap();
    PNGEncoder::new(f)
        .encode(&img, width, height, image::ColorType::Rgb8)
        .unwrap();
}

#[cfg(test)]
mod tests {

    #[test]
    fn freq() {
        assert_eq!(
            vec![
                90000000.0,
                90166666.62,
                90333333.24,
                90499999.86,
                90666666.48,
                90833333.1,
                90999999.72,
                91166666.34,
                91333333.0,
                91499999.62,
                91666666.24,
                91833332.86,
                91999999.48,
                92166666.1,
                92333332.72,
                92499999.34,
                92666666.0,
                92833332.62,
                92999999.24,
                93166665.86,
                93333332.48,
                93499999.1,
                93666665.72,
                93833332.34,
                93999999.0,
                94166665.62,
                94333332.24,
                94499998.86,
                94666665.48,
                94833332.1,
                94999998.72,
                95166665.34,
                95333332.0,
                95499998.62,
                95666665.24,
                95833331.86,
                95999998.48,
                96166665.1,
                96333331.72,
                96499998.34,
                96666665.0,
                96833331.62,
                96999998.24,
                97166664.86,
                97333331.48,
                97499998.1,
                97666664.72,
                97833331.34,
                97999998.0,
                98166664.62,
                98333331.24,
                98499997.86,
                98666664.48,
                98833331.1,
                98999997.72,
                99166664.34,
                99333331.0,
                99499997.62,
                99666664.24,
                99833330.86,
                99999997.48,
                100166664.1,
                100333330.72,
                100499997.34,
                100666664.0,
                100833330.62,
                100999997.24,
                101166663.86,
                101333330.48,
                101499997.1,
                101666663.72,
                101833330.34,
                101999997.0,
                102166663.62,
                102333330.24,
                102499996.86,
                102666663.48,
                102833330.1,
                102999996.72,
                103166663.34,
                103333330.0,
                103499996.62,
                103666663.24,
                103833329.86,
                103999996.48,
                104166663.1,
                104333329.72,
                104499996.34,
                104666663.0,
                104833329.62,
                104999996.24,
                105166662.86,
                105333329.48,
                105499996.1,
                105666662.72,
                105833329.34,
                105999996.0,
                106166662.62,
                106333329.24,
                106499995.86,
                106666662.48,
                106833329.1,
                106999995.72,
                107166662.34,
                107333329.0,
                107499995.62,
                107666662.24,
                107833328.86,
                107999995.48,
                108166662.1,
                108333328.72,
                108499995.34,
                108666662.0,
                108833328.62,
                108999995.24,
                109166661.86,
                109333328.48,
                109499995.1,
                109666661.72,
                109833328.34
            ],
            vec![
                90000000.0,
                90166666.62,
                90333333.24,
                90499999.86,
                90666666.48,
                90833333.1,
                90999999.72,
                91166666.34,
                91333333.0,
                91499999.62,
                91666666.24,
                91833332.86,
                91999999.48,
                92166666.1,
                92333332.72,
                92499999.34,
                92666666.0,
                92833332.62,
                92999999.24,
                93166665.86,
                93333332.48,
                93499999.1,
                93666665.72,
                93833332.34,
                93999999.0,
                94166665.62,
                94333332.24,
                94499998.86,
                94666665.48,
                94833332.1,
                94999998.72,
                95166665.34,
                95333332.0,
                95499998.62,
                95666665.24,
                95833331.86,
                95999998.48,
                96166665.1,
                96333331.72,
                96499998.34,
                96666665.0,
                96833331.62,
                96999998.24,
                97166664.86,
                97333331.48,
                97499998.1,
                97666664.72,
                97833331.34,
                97999998.0,
                98166664.62,
                98333331.24,
                98499997.86,
                98666664.48,
                98833331.1,
                98999997.72,
                99166664.34,
                99333331.0,
                99499997.62,
                99666664.24,
                99833330.86,
                99999997.48,
                100166664.1,
                100333330.72,
                100499997.34,
                100666664.0,
                100833330.62,
                100999997.24,
                101166663.86,
                101333330.48,
                101499997.1,
                101666663.72,
                101833330.34,
                101999997.0,
                102166663.62,
                102333330.24,
                102499996.86,
                102666663.48,
                102833330.1,
                102999996.72,
                103166663.34,
                103333330.0,
                103499996.62,
                103666663.24,
                103833329.86,
                103999996.48,
                104166663.1,
                104333329.72,
                104499996.34,
                104666663.0,
                104833329.62,
                104999996.24,
                105166662.86,
                105333329.48,
                105499996.1,
                105666662.72,
                105833329.34,
                105999996.0,
                106166662.62,
                106333329.24,
                106499995.86,
                106666662.48,
                106833329.1,
                106999995.72,
                107166662.34,
                107333329.0,
                107499995.62,
                107666662.24,
                107833328.86,
                107999995.48,
                108166662.1,
                108333328.72,
                108499995.34,
                108666662.0,
                108833328.62,
                108999995.24,
                109166661.86,
                109333328.48,
                109499995.1,
                109666661.72,
                109833328.34
            ]
        )
    }
}
